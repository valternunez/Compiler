START' -> START
START -> PROGRAM-HEADING ; PROGRAM-BLOCK .
PROGRAM-HEADING -> program identifier OPT-PROGRAM-PARAMETERS
OPT-PROGRAM-PARAMETERS -> ( PROGRAM-PARAMETERS )
OPT-PROGRAM-PARAMETERS -> ''
PROGRAM-PARAMETERS -> IDENTIFIER-LIST
PROGRAM-BLOCK -> CONSTANT-DECLARATION-PART VARIABLE-DECLARATION-PART STATEMENT-PART
CONSTANT-DECLARATION-PART -> constant CONSTANT-DEFINITION ; MORE-CONSTANT-DEFINITION
CONSTANT-DECLARATION-PART -> ''
CONSTANT-DEFINITION -> identifier = EXPRESSION
MORE-CONSTANT-DEFINITION -> CONSTANT-DEFINITION ; MORE-CONSTANT-DEFINITION
MORE-CONSTANT-DEFINITION -> ''
VARIABLE-DECLARATION-PART -> var VARIABLE-DECLARATION ; MORE-VARIABLE-DECLARATION
VARIABLE-DECLARATION-PART -> ''
MORE-VARIABLE-DECLARATION -> VARIABLE-DECLARATION ; MORE-VARIABLE-DECLARATION
MORE-VARIABLE-DECLARATION -> ''
VARIABLE-DECLARATION -> IDENTIFIER-LIST : TYPE
STATEMENT-PART -> begin STATEMENT-SEQUENCE end 
TYPE -> integer
TYPE -> real
TYPE -> boolean
TYPE -> string
IDENTIFIER-LIST -> identifier MORE-IDENTIFIER
MORE-IDENTIFIER -> , identifier MORE-IDENTIFIER
MORE-IDENTIFIER -> ''
STATEMENT-SEQUENCE -> STATEMENT ; MORE-STATEMENT
MORE-STATEMENT -> STATEMENT ; MORE-STATEMENT
MORE-STATEMENT -> ''
STATEMENT -> SIMPLE-STATEMENT
STATEMENT -> STRUCTURED-STATEMENT
SIMPLE-STATEMENT -> ASSIGNMENT-STATEMENT
SIMPLE-STATEMENT -> IO-STATEMENT
ASSIGNMENT-STATEMENT -> identifier := EXPRESSION
IO-STATEMENT -> WRITELN-STATEMENT
IO-STATEMENT -> READLN-STATEMENT
WRITELN-STATEMENT -> writeln ( OPT-ELEMENT-LIST )
OPT-ELEMENT-LIST -> ELEMENT-LIST
OPT-ELEMENT-LIST -> ''
ELEMENT-LIST -> ELEMENT MORE-ELEMENT
MORE-ELEMENT -> , ELEMENT MORE-ELEMENT
MORE-ELEMENT -> ''
ELEMENT -> number
ELEMENT -> string
ELEMENT -> identifier
READLN-STATEMENT -> readln OPT-IDENTIFIER-LIST
OPT-IDENTIFIER-LIST -> ( IDENTIFIER-LIST )
OPT-IDENTIFIER-LIST -> ''
STRUCTURED-STATEMENT -> COMPOUND-STATEMENT
STRUCTURED-STATEMENT -> REPETITIVE-STATEMENT
STRUCTURED-STATEMENT -> CONDITIONAL-STATEMENT
COMPOUND-STATEMENT -> begin STATEMENT-SEQUENCE end
REPETITIVE-STATEMENT -> WHILE-STATEMENT
REPETITIVE-STATEMENT -> REPEAT-STATEMENT
REPETITIVE-STATEMENT -> FOR-STATEMENT
WHILE-STATEMENT -> while EXPRESSION do STATEMENT
REPEAT-STATEMENT -> repeat STATEMENT-SEQUENCE until EXPRESSION
FOR-STATEMENT -> for identifier := EXPRESSION TO-DOWNTO EXPRESSION do STATEMENT
TO-DOWNTO -> to
TO-DOWNTO -> downto
CONDITIONAL-STATEMENT -> if EXPRESSION then STATEMENT OPT-ELSE
OPT-ELSE -> else STATEMENT
OPT-ELSE -> ''
EXPRESSION -> SIMPLE-EXPRESSION OPT-REL-EXPRESSION
OPT-REL-EXPRESSION -> RELATIONAL-OPERATOR SIMPLE-EXPRESSION
OPT-REL-EXPRESSION -> ''
SIMPLE-EXPRESSION -> OPT-SIGN TERM MORE-ADD-TERM
OPT-SIGN -> +
OPT-SIGN -> -
OPT-SIGN -> ''
MORE-ADD-TERM -> ADDITION-OPERATOR TERM MORE-ADD-TERM
MORE-ADD-TERM -> ''
TERM -> FACTOR MORE-MULT-TERM
MORE-MULT-TERM -> MULTIPLICATION-OPERATOR FACTOR MORE-MULT-TERM
MORE-MULT-TERM -> ''
FACTOR -> identifier
FACTOR -> number
FACTOR -> string
FACTOR -> ( EXPRESSION )
FACTOR -> not FACTOR
RELATIONAL-OPERATOR -> =
RELATIONAL-OPERATOR -> <>
RELATIONAL-OPERATOR -> <
RELATIONAL-OPERATOR -> <=
RELATIONAL-OPERATOR -> >
RELATIONAL-OPERATOR -> >=
ADDITION-OPERATOR -> +
ADDITION-OPERATOR -> -
ADDITION-OPERATOR -> or
MULTIPLICATION-OPERATOR -> *
MULTIPLICATION-OPERATOR -> /
MULTIPLICATION-OPERATOR -> div
MULTIPLICATION-OPERATOR -> mod
MULTIPLICATION-OPERATOR -> and